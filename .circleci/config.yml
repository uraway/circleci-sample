version: 2.1
jobs:
  build:
    working_directory: ~/project/src
    docker:
      - image: circleci/php:7.3.10-stretch-node-browsers
      - image: circleci/mysql:5.7
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:3

    steps:
      - checkout:
          path: ~/project

      - run: sudo docker-php-ext-install pdo_mysql

      - run: chown -R $USER:$USER ~/project/src
      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            - composer-v1-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-

      - run: npm install

      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run: php artisan migrate --env=testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      # this example uses codecept but you're not limited to it
      - run: mkdir -p test_results
      - run: ./vendor/bin/phpunit --testdox-xml test_results/phpunit/result.xml
      # - run: ./vendor/bin/codecept run --xml result.xml
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results
